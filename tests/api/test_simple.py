import httpx
import pytest
from pydantic import ValidationError
from assertpy import assert_that

from rich import print as rprint
from rich.json import JSON
from src.config import settings
from src.models.responses.user_responses import ListUsersResponse, SingleUserResponse


# –¢–µ—Å—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@pytest.mark.asyncio  # –ë–µ–∑ —ç—Ç–æ–≥–æ pytest –Ω–µ –ø–æ–π–º–µ—Ç –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å async —Ñ—É–Ω–∫—Ü–∏—é
async def test_get_users():  # —Ç–µ—Å—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with httpx.AsyncClient() as client:  # —Å–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        response = await client.get(
            f"{settings.BASE_URL}/users?page=2&per_page=2", headers=settings.headers
        )  # await - –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

        rprint(
            "\nüìã [blue]Response url:[/blue]", response.url
        )  # –≤—ã–≤–æ–¥–∏–º url
        rprint(
            "üìã [blue]Response status code:[/blue]", response.status_code
        )  # –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ pydantic –º–æ–¥–µ–ª—å
        try:
            user_response = ListUsersResponse.model_validate(
                response.json()
            )  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
            rprint("‚úÖ [green]Schema validation passed![/green]")
        except ValidationError as e:
            rprint(f"‚ùå [red]Schema validation failed:[/red] {e}")
            raise

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é assertpy
        assert_that(response.status_code).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ).is_equal_to(200)
        assert_that(user_response.page).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"
        ).is_equal_to(2)
        assert_that(user_response.per_page).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        ).is_equal_to(2)

        rprint("\nüìã [blue]Response data:[/blue]\n", JSON.from_data(response.json()))   # –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ


# ------------------------------------------------------------------------------------------------
# –¢–µ—Å—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@pytest.mark.asyncio
async def test_get_single_user():
    async with httpx.AsyncClient() as client:  # —Å–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        response = await client.get(
            f"{settings.BASE_URL}/users/1", headers=settings.headers
        )

        rprint(
            "\nüìã [blue]Response url:[/blue]", response.url
        )  # –≤—ã–≤–æ–¥–∏–º url
        rprint(
            "üìã [blue]Response status code:[/blue]", response.status_code
        )  # –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ pydantic –º–æ–¥–µ–ª—å
        try:
            user_response = SingleUserResponse.model_validate(
                response.json()
            )  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
            rprint("‚úÖ [green]Schema validation passed![/green]")
        except ValidationError as e:
            rprint(f"‚ùå [red]Schema validation failed:[/red] {e}")
            raise

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é assertpy
        assert_that(response.status_code).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ).is_equal_to(200)
        assert_that(user_response.data.id).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ API"
        ).is_equal_to(1)
        assert_that(user_response.data.email).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ email –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ).is_equal_to("george.bluth@reqres.in")
        assert_that(user_response.data.first_name).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ).is_equal_to("George")
        assert_that(user_response.data.last_name).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ).is_equal_to("Bluth")
        assert_that(user_response.support.text).described_as(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ"
        ).is_equal_to(
            "Tired of writing endless social media content? Let Content Caddy generate it for you."
        )

        rprint("\nüìã [blue]Response data:[/blue]\n", JSON.from_data(response.json()))   # –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
